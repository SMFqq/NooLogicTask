import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
from db import init_db, save_contact

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")  # –¥–æ–¥–∞–π—Ç–µ —É .env: CHANNEL_ID=-1003081879384

if not BOT_TOKEN or not CHANNEL_ID:
    raise ValueError("–ü–æ–º–∏–ª–∫–∞: –∑–∞–¥–∞–π—Ç–µ BOT_TOKEN —ñ CHANNEL_ID —É —Ñ–∞–π–ª—ñ .env")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
init_db()

waiting_for_contact = set()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    waiting_for_contact.add(chat_id)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é üëá")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    text = update.message.text

    if chat_id in waiting_for_contact:
        waiting_for_contact.remove(chat_id)
        save_contact(chat_id, text)
        await update.message.reply_text("–°—É–ø–µ—Ä! –ó–∞–ø–∏—Å–∞–≤.")

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç —É –∫–∞–Ω–∞–ª
        try:
            await context.bot.send_message(chat_id=int(CHANNEL_ID), text=f"–ù–æ–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –≤—ñ–¥ {chat_id}:\n{text}")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —É –∫–∞–Ω–∞–ª: {e}")

    else:
        await update.message.reply_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π. –ù–∞–¥—ñ—à–ª—ñ—Ç—å /start —É Telegram.")
    app.run_polling()

if __name__ == "__main__":
    main()
